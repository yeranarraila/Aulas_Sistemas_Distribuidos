package LamportCorba;


/**
* LamportCorba/ServidorPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from Server.idl
* Quarta-feira, 29 de Abril de 2015 20h05min51s BRT
*/

public abstract class ServidorPOA extends org.omg.PortableServer.Servant
 implements LamportCorba.ServidorOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("entrarNoSD", new java.lang.Integer (0));
    _methods.put ("updateSD", new java.lang.Integer (1));
    _methods.put ("mensagemDoLider", new java.lang.Integer (2));
    _methods.put ("mensagemDosMembros", new java.lang.Integer (3));
    _methods.put ("requisicao_cliente", new java.lang.Integer (4));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  //somente metodos que serao invocados remotamente
       case 0:  // LamportCorba/Servidor/entrarNoSD
       {
         org.omg.CORBA.Object servidor = org.omg.CORBA.ObjectHelper.read (in);
         String key = in.read_string ();
         int $result = (int)0;
         $result = this.entrarNoSD (servidor, key);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }


  //adiciona nova maquina ao SD
       case 1:  // LamportCorba/Servidor/updateSD
       {
         org.omg.CORBA.Object participantes[] = LamportCorba.ListaHelper.read (in);
         String chaves[] = LamportCorba.ListaSHelper.read (in);
         this.updateSD (participantes, chaves);
         out = $rh.createReply();
         break;
       }


  //quando novas maquinas sao adicionadas ao SD
       case 2:  // LamportCorba/Servidor/mensagemDoLider
       {
         int decisao = in.read_long ();
         this.mensagemDoLider (decisao);
         out = $rh.createReply();
         break;
       }

       case 3:  // LamportCorba/Servidor/mensagemDosMembros
       {
         int decisao = in.read_long ();
         this.mensagemDosMembros (decisao);
         out = $rh.createReply();
         break;
       }

       case 4:  // LamportCorba/Servidor/requisicao_cliente
       {
         int requisicao = in.read_long ();
         String $result = null;
         $result = this.requisicao_cliente (requisicao);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:LamportCorba/Servidor:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Servidor _this() 
  {
    return ServidorHelper.narrow(
    super._this_object());
  }

  public Servidor _this(org.omg.CORBA.ORB orb) 
  {
    return ServidorHelper.narrow(
    super._this_object(orb));
  }


} // class ServidorPOA
